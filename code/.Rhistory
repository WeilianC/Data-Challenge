library(readr)
library(dplyr)
library(ggplot2)
library(stats)
# load dataset
data <- read_csv("../clean/cleaned_dataset.csv")
glimpse(data)
# Convert categorical variables to factor type
data <- data %>%
mutate(across(c(gender, ever_married, work_type, Residence_type, smoking_status), as.factor))
glimpse(data)
# Check data distribution
summary(data)
table(data$stroke)
# Univariate Analysis - Visualization
# Relationship between Gender and Stroke Risk
ggplot(data, aes(x = gender, fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Gender", x = "Gender", y = "Proportion")
# Relationship between Hypertension and Stroke Risk
ggplot(data, aes(x = as.factor(hypertension), fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Hypertension", x = "Hypertension", y = "Proportion")
# Relationship between Heart Disease and Stroke Risk
ggplot(data, aes(x = as.factor(heart_disease), fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Heart Disease", x = "Heart Disease", y = "Proportion")
# Relationship between Smoking Status and Stroke Risk
ggplot(data, aes(x = smoking_status, fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Smoking Status", x = "Smoking Status", y = "Proportion")
# Relationship between Average Glucose Level and Stroke Risk
ggplot(data, aes(x = as.factor(stroke), y = avg_glucose_level)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Stroke Distribution by Average Glucose Level", x = "Stroke", y = "Average Glucose Level")
# Relationship between BMI and Stroke Risk
ggplot(data, aes(x = as.factor(stroke), y = bmi)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Stroke Distribution by BMI", x = "Stroke", y = "BMI")
# Relationship between Marital Status and Stroke Risk
ggplot(data, aes(x = ever_married, fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Marital Status", x = "Marital Status", y = "Proportion")
# Relationship between Work Type and Stroke Risk
ggplot(data, aes(x = work_type, fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Work Type", x = "Work Type", y = "Proportion")
# Relationship between Residence Type and Stroke Risk
ggplot(data, aes(x = Residence_type, fill = as.factor(stroke))) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Stroke Distribution by Residence Type", x = "Residence Type", y = "Proportion")
# Relationship between Age and Stroke Risk
ggplot(data, aes(x = as.factor(stroke), y = age)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Stroke Distribution by Age", x = "Stroke", y = "Age")
# Convert categorical variables to factor type
data$gender <- as.factor(data$gender)
data$hypertension <- as.factor(data$hypertension)
data$heart_disease <- as.factor(data$heart_disease)
data$ever_married <- as.factor(data$ever_married)
data$work_type <- as.factor(data$work_type)
data$Residence_type <- as.factor(data$Residence_type)
data$smoking_status <- as.factor(data$smoking_status)
data$stroke <- as.factor(data$stroke)
# Build a logistic regression model
model <- glm(stroke ~ gender + age + hypertension + heart_disease + ever_married +
work_type + Residence_type + avg_glucose_level + bmi + smoking_status,
data = data, family = binomial())
# Output the summary of the model
summary(model)
# In-depth Analysis of Three Significant Variables
# Relationship Between Age and Stroke Risk
# Creating age groups
data$age_group <- cut(data$age, breaks = c(0, 18, 40, 65, 100), labels = c("Under 18", "19-40", "41-65", "Over 65"))
ggplot(data, aes(x = age_group, y = stroke)) +
geom_boxplot() +
labs(title = "Stroke Risk Across Different Age Groups", x = "Age Group", y = "Stroke Risk")
ggsave("../visualisation/age_group.png", type = "png")
# Relationship Between Hypertension and Stroke Risk
ggplot(data, aes(x = hypertension, fill = stroke)) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("0" = "blue", "1" = "red")) +
labs(title = "Stroke Risk and Hypertension", x = "Hypertension", y = "Proportion of Stroke")
ggsave("../visualisation/hypertension.png", type = "png")
library(readr)
library(dplyr)
# load dataset
setwd("/Users/will/Library/CloudStorage/OneDrive-个人/Bristol/TB1/AHDS/challenge")
data <- read_csv("raw/healthcare-dataset-stroke-data.csv")
# Check the structure of the dataset
str(data)
# Use histogram and boxplot to visualize the distribution of bmi
hist(as.numeric(data$bmi), main = "Histogram of bmi", xlab = "bmi")
boxplot(as.numeric(data$bmi), main = "Boxplot of bmi", ylab = "bmi")
hist(as.numeric(data$avg_glucose_level), main = "Histogram of avg_glucose_level", xlab = "avg_glucose_level")
boxplot(as.numeric(data$avg_glucose_level), main = "Boxplot of avg_glucose_level", ylab = "avg_glucose_level")
# Fill missing values with the median of column 'bmi'
# When the data distribution is skewed or contains extreme values, the median is a more robust choice because it is less sensitive to these extreme values
data$bmi <- as.numeric(as.character(data$bmi))
data <- data %>%
mutate(bmi = ifelse(is.na(bmi), median(bmi, na.rm = TRUE), bmi))
glimpse(data)
# Calculate IQR of BMI
Q1_bmi <- quantile(data$bmi, 0.25, na.rm = TRUE)
Q3_bmi <- quantile(data$bmi, 0.75, na.rm = TRUE)
IQR_bmi <- Q3_bmi - Q1_bmi
# Calculate the IQR of the average glucose level
Q1_glucose <- quantile(data$avg_glucose_level, 0.25, na.rm = TRUE)
Q3_glucose <- quantile(data$avg_glucose_level, 0.75, na.rm = TRUE)
IQR_glucose <- Q3_glucose - Q1_glucose
# Define upper and lower bounds for extreme values
lower_bound_bmi <- Q1_bmi - 1.5 * IQR_bmi
upper_bound_bmi <- Q3_bmi + 1.5 * IQR_bmi
lower_bound_glucose <- Q1_glucose - 1.5 * IQR_glucose
upper_bound_glucose <- Q3_glucose + 1.5 * IQR_glucose
# Identify extreme values
outliers_bmi <- data %>% filter(bmi < lower_bound_bmi | bmi > upper_bound_bmi)
outliers_glucose <- data %>% filter(avg_glucose_level < lower_bound_glucose | avg_glucose_level > upper_bound_glucose)
data_cleaned <- data %>%
filter(bmi >= lower_bound_bmi & bmi <= upper_bound_bmi &
avg_glucose_level >= lower_bound_glucose & avg_glucose_level <= upper_bound_glucose)
boxplot(data_cleaned$bmi, main = "Boxplot of bmi", ylab = "bmi")
boxplot(data_cleaned$avg_glucose_level, main = "Boxplot of avg_glucose_level", ylab = "avg_glucose_level")
glimpse(data_cleaned)
# Save cleaned dataset
write_csv(data_cleaned, "../clean/cleaned_dataset.csv")
